name: Release

on:
  push:
    branches:
      - main
      - dev

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            extension: ".exe"
            artifact_name: build-windows
            shell: pwsh
          - os: ubuntu-latest
            extension: ""
            artifact_name: build-ubuntu
            shell: bash
          - os: macos-latest
            extension: "-macOS"
            artifact_name: build-macos
            shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Dependencies and Build (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          python -m venv venv
          .\venv\Scripts\Activate.ps1
          pip install pyinstaller
          pip install -r requirements.txt
          if ($env:GITHUB_REF_NAME -eq "main") {
            pyinstaller main.spec
          } else {
            pyinstaller dev.spec
          }
          New-Item -ItemType Directory -Force -Path release/windows-latest
          Copy-Item dist\Fluentus.exe release\windows-latest\Fluentus${{ matrix.extension }}
      - name: Install Dependencies and Build (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m venv venv
          source venv/bin/activate
          pip install pyinstaller
          pip install -r requirements.txt
          if [ "${{ github.ref_name }}" == "main" ]; then
            pyinstaller main.spec
          else
            pyinstaller dev.spec
          fi
          chmod +x dist/Fluentus
          mkdir -p release/ubuntu-latest
          cp dist/Fluentus release/ubuntu-latest/Fluentus${{ matrix.extension }}
      - name: Install Dependencies and Build (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m venv venv
          source venv/bin/activate
          pip install pyinstaller
          pip install -r requirements.txt
          
          if [ "${{ github.ref_name }}" == "main" ]; then
            pyinstaller main.spec
          else
            pyinstaller dev.spec
          fi
          chmod +x dist/Fluentus
          mkdir -p release/macos-latest
          cp dist/Fluentus release/macos-latest/Fluentus${{ matrix.extension }}
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: release/${{ matrix.os }}/Fluentus${{ matrix.extension }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download build artifacts for Windows
        uses: actions/download-artifact@v4
        with:
          name: build-windows
          path: release/windows-latest/

      - name: Download build artifacts for Ubuntu
        uses: actions/download-artifact@v4
        with:
          name: build-ubuntu
          path: release/ubuntu-latest/

      - name: Download build artifacts for macOS
        uses: actions/download-artifact@v4
        with:
          name: build-macos
          path: release/macos-latest/

      - name: Install semantic-release
        run: |
          npm install --save-dev semantic-release @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/changelog @semantic-release/github @semantic-release/git
      - name: Install Dependencies
        run: npm install

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release